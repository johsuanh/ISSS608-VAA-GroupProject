[
  {
    "objectID": "Team/Project_Proposal.html",
    "href": "Team/Project_Proposal.html",
    "title": "Project Proposal: Wheather or Not – Predicting the Unpredictable",
    "section": "",
    "text": "Climate change is a critical global issue, and Singapore is no exception. As a tropical country, Singapore experiences consistently hot and humid weather. However, climate change has intensified extreme weather events, leading to higher temperatures, floods, and even droughts. These changes disproportionately affect low-income and elderly residents who may struggle to afford air conditioning or improve their living conditions.\nTo address this, our team will use open-source weather data to analyze temperature and rainfall patterns across Singapore. By collecting data from four weather stations in the East, Central, West, and North regions, we aim to create visualizations and forecasts that provide a comprehensive understanding of local weather trends."
  },
  {
    "objectID": "Team/Project_Proposal.html#exploratory-data-analysis-eda",
    "href": "Team/Project_Proposal.html#exploratory-data-analysis-eda",
    "title": "Project Proposal: Wheather or Not – Predicting the Unpredictable",
    "section": "4.1 Exploratory Data Analysis (EDA)",
    "text": "4.1 Exploratory Data Analysis (EDA)\nBy visualizing data with interactive Shiny App, users can analyze patterns and discover relationships between time-series, rainfall, temperature and geography. \nBelow are the visualization methods we will use for our EDA: \n\nBivariate Analysis\n\nHalf Eye graph + box plot: visualize rainfall or temperature data by combining density plot and box plot and by station.\n\n\n\nMultivariate Analysis  \n\nScatter Plot : compare rainfall with temperature and colored by station or region.\n\n\n\nTime Series Analysis  \n\nLine chart of time-series data: visualize rainfall or temperature by station overtimes \n\n\n\nGeospatial Analysis\n\nChoropleth Maps: use the tmap package to plot weather data across stations, faceted by year, and create additional layers with census data. This will allow users to compare and explore areas with high temperatures and high proportions of low-income or elderly residents to assess the social impact of extreme weather conditions."
  },
  {
    "objectID": "Team/Project_Proposal.html#confirmatory-data-analysis-cda",
    "href": "Team/Project_Proposal.html#confirmatory-data-analysis-cda",
    "title": "Project Proposal: Wheather or Not – Predicting the Unpredictable",
    "section": "4.2 Confirmatory Data Analysis (CDA)",
    "text": "4.2 Confirmatory Data Analysis (CDA)\nAfter EDA, apply the following statistical tests to confirm whether mean rainfall or temperature differs across regions or seasons: \n\nNormality Test\n\nShapiro-Wilk Test : check if the data follows a normal distribution, which will affect which statistical parameters to use in the analysis \n\n\n\nParametric Tests (comparing multiple groups)\n\nOne-way ANOVA test: Comparing mean rainfall or temperature across stations \nTwo-way ANOVA test: Comparing mean rainfall or temperature across both station and month \n\n\n\nNon-Parametric Tests (comparing multiple groups) \n\nKruskal-Wallis Test: Comparing median rainfall or temperature across stations or both station and month"
  },
  {
    "objectID": "Team/Project_Proposal.html#forecasting",
    "href": "Team/Project_Proposal.html#forecasting",
    "title": "Project Proposal: Wheather or Not – Predicting the Unpredictable",
    "section": "4.3 Forecasting",
    "text": "4.3 Forecasting\n\nPlots\n\nACF & PCF plots : help users understand the autocorrelation in time series data and identify which lags might be useful for forecasting model. \nSTL plots: help decompose the time series into its seasonal, trend, and remainder components, providing insight into the structure of the data. \n\n\n\nForecasting Models\n\nARIMA Models:  \n\nAuto ARIMA: when there is a mix of trend and seasonal patterns with autocorrelation, user can use auto ARIMA, which automatically selects the best parameters (AR, I, MA) based on the data \nSTL ARIMA: when there are complex seasonality or non-linear trends in the data, user can choose this model \n\nETS Models:  \n\nAuto ETS: user can choose this model if the data shows clear, stable trends or seasonal patterns with little noise"
  },
  {
    "objectID": "ShinyApp/Prototype_test.html",
    "href": "ShinyApp/Prototype_test.html",
    "title": "Prototype Testing",
    "section": "",
    "text": "pacman::p_load(sf, tmap, tidyverse,readxl)\n\nalso installing the dependencies 'logger', 'geometries', 'rapidjsonr', 'sfheaders', 'terra', 'stringdist', 'spacesXYZ', 'geojsonsf', 'raster', 'jsonify', 'leaflet.providers', 'sp', 'lwgeom', 'dichromat', 'cols4all', 'leafem', 'leafgl', 'leaflegend', 'leaflet', 'leafsync', 'stars', 'tmaptools', 'servr'\n\n\n\nThe downloaded binary packages are in\n    /var/folders/v7/kn7_1jkd60l80zw7rs_11qk00000gn/T//RtmplBT8Ne/downloaded_packages\n\n\n\ntmap installed\n\n\n\nmpsz &lt;- st_read(dsn = \"data/geospatial\", \n                layer = \"MP14_PLNG_AREA_WEB_PL\")\n\nReading layer `MP14_PLNG_AREA_WEB_PL' from data source \n  `/Users/geloliu/Gelo-608/ISSS608/ISSS608-VAA-GroupProject/ShinyApp/data/geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 55 features and 12 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n\n\n\nage &lt;- read_csv(\"data/ResidentPopulationbyPlanningAreaSubzoneofResidenceAgeGroupandFloorAreaofResidenceCensusofPopulation2020.csv\")\n\nRows: 388 Columns: 121\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (121): Number, Total1_Total, Total1_0_4, Total1_5_9, Total1_10_14, Total...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nincome &lt;- read_excel(\"data/ResidentHouseholdsbyPlanningAreaofResidenceandMonthlyHouseholdIncomefromWorkCensusOfPopulation2020.xlsx\",sheet = \"sheet1\",range=\"A11:U43\")\n\n\nage &lt;- age %&gt;%\n  filter(grepl(\"Total\", Number, ignore.case = TRUE)) %&gt;%  \n  select(1:21) %&gt;%\n  replace(. == \"-\", NA) %&gt;%\n  mutate(across(2:21, as.numeric)) %&gt;%\n  mutate(Aged = rowSums(select(., 16:21), na.rm = TRUE)) %&gt;%\n  mutate(PA = sub(\" - Total.*\", \"\", Number))%&gt;%\n  select(c(\"PA\",\"Aged\",\"Total1_Total\"))%&gt;%\n  mutate(`Aged%` = round(Aged/Total1_Total*100,0),\n         PA = toupper(PA))\n\n\nage &lt;- left_join(mpsz,age,by = c(\"PLN_AREA_N\" = \"PA\"))\n\n\nincome &lt;- income %&gt;%\n  mutate(across(2:21, as.numeric))\nincome_proportion &lt;- income %&gt;%\n  mutate(across(3:21, ~ round(. / income[[2]] * 100, 2))) %&gt;%\n  mutate(`LowerIncome%`=rowSums(select(.,3:6), na.rm = TRUE))\nlow_income &lt;- income_proportion %&gt;%\n  select(c(`Planning Area of Residence`,`LowerIncome%`))%&gt;%\n  mutate(`Planning Area of Residence` = toupper(`Planning Area of Residence`))\n\n\nlow_income &lt;- left_join(mpsz,low_income,by = c(\"PLN_AREA_N\" = \"Planning Area of Residence\"))\n\n\n# Ensure both layers have the same CRS\nlow_income &lt;- st_transform(low_income, st_crs(age))\n\n# Set the tmap mode to view (interactive)\ntmap_mode(\"view\")\n\nℹ tmap mode set to \"view\".\n\n# Create the map with multiple layers\ntm_shape(age) +\n  tm_fill(col = \"Aged%\", \n          palette = \"Blues\", \n          title = \"Aged Population(%)\",\n          alpha = 0.9,\n          style = \"quantile\") +\n  tm_borders(col = \"white\", lwd = 0.5, alpha = 0.5) +\ntm_shape(low_income) + \n  tm_fill(col = \"LowerIncome%\", \n          palette = \"YlOrRd\", \n          title = \"IncomeBelow:3000(%)\", \n          style = \"quantile\",\n          n = 5,\n          alpha = 0.6) +\n  tm_borders(col = \"darkgrey\", lwd = 0.5, alpha = 0.5) +\ntm_basemap(server = \"CartoDB.Positron\") +\ntm_layout(title = \"Aged and Low-Income Population Across Singapore\", \n          legend.outside = TRUE,\n          legend.outside.position = \"right\")\n\n\n── tmap v3 code detected ───────────────────────────────────────────────────────\n[v3-&gt;v4] `tm_polygons()`: instead of `style = \"quantile\"`, use fill.scale =\n`tm_scale_intervals()`.\nℹ Migrate the argument(s) 'style', 'palette' (rename to 'values') to\n  'tm_scale_intervals(&lt;HERE&gt;)'[v3-&gt;v4] `tm_polygons()`: use 'fill' for the fill color of polygons/symbols\n(instead of 'col'), and 'col' for the outlines (instead of 'border.col').[v3-&gt;v4] `tm_polygons()`: use `fill_alpha` instead of `alpha`.[v3-&gt;v4] `tm_polygons()`: migrate the argument(s) related to the legend of the\nvisual variable `fill` namely 'title' to 'fill.legend = tm_legend(&lt;HERE&gt;)'[v3-&gt;v4] `tm_borders()`: use `fill_alpha` instead of `alpha`.[v3-&gt;v4] `tm_polygons()`: use `fill_alpha` instead of `alpha`.[v3-&gt;v4] `tm_polygons()`: migrate the argument(s) related to the legend of the\nvisual variable `fill` namely 'title' to 'fill.legend = tm_legend(&lt;HERE&gt;)'[v3-&gt;v4] `tm_borders()`: use `fill_alpha` instead of `alpha`.[v3-&gt;v4] `tm_layout()`: use `tm_title()` instead of `tm_layout(title = )`[cols4all] color palettes: use palettes from the R package cols4all. Run\n`cols4all::c4a_gui()` to explore them. The old palette name \"Blues\" is named\n\"brewer.blues\"Multiple palettes called \"blues\" found: \"brewer.blues\", \"matplotlib.blues\". The first one, \"brewer.blues\", is returned.\n[cols4all] color palettes: use palettes from the R package cols4all. Run\n`cols4all::c4a_gui()` to explore them. The old palette name \"YlOrRd\" is named\n\"brewer.yl_or_rd\"Multiple palettes called \"yl_or_rd\" found: \"brewer.yl_or_rd\", \"matplotlib.yl_or_rd\". The first one, \"brewer.yl_or_rd\", is returned.\n\n\n\n\n\n\n\n\n\npacman::p_load(ggdist,ggridges,lubridate,knitr)\n\n\nstation&lt;-read_csv(\"data/Changi&MarinaBarrage.csv\")\n\nRows: 8098 Columns: 16\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (13): station, daily_rainfall_total_mm, highest_30_min_rainfall_mm, high...\ndbl  (3): year, month, day\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nstation &lt;- station %&gt;%\n  select(1:13) %&gt;%\n  mutate(\n    across(5:13, as.numeric),  # Convert only numeric columns\n    date = make_date(year, month, day),\n    station = as.factor(station)\n  )\n\nWarning: There were 9 warnings in `mutate()`.\nThe first warning was:\nℹ In argument: `across(5:13, as.numeric)`.\nCaused by warning:\n! NAs introduced by coercion\nℹ Run `dplyr::last_dplyr_warnings()` to see the 8 remaining warnings.\n\n\n\nggplot(station, \n       aes(x = mean_temperature_c, y = station, fill = station)) +\n  geom_density_ridges(\n    scale = 2, \n    rel_min_height = 0.01, \n    alpha = 0.5\n  ) +\n  labs(title = \"Distribution of Temperature Across Stations\",\n       x = \"Mean Temperature (°C)\", \n       y = \"Station\") +\n  theme(\n    panel.background = element_rect(fill = \"#f3f1e9\"),\n    plot.background = element_rect(fill = \"#f3f1e9\", color = NA),\n    legend.position = \"none\",\n    plot.title = element_text(face = \"bold\")\n  )\n\nPicking joint bandwidth of 0.215\n\n\nWarning: Removed 3850 rows containing non-finite outside the scale range\n(`stat_density_ridges()`).\n\n\n\n\n\n\n\n\n\n\nggplot(station, \n       aes(x = station,y = mean_temperature_c)) +\n  stat_halfeye(\n               alpha = 0.5,\n               adjust = 0.5,\n               justification = -0.1,\n               .width = 0,\n               fill = \"#8AA4FF\")+\n  geom_boxplot(width = 0.10,\n               outlier.shape = NA,\n               color=\"grey50\")+\n  labs(title =\"Distribution of Mean Temperature Across Stations\",\n       x = \"\", y=\"Mean Temperature\")+\n  coord_flip() +\n  theme(panel.background = element_rect(fill = \"#ffffff\"),\n        plot.background = element_rect(fill = \"#ffffff\",color = NA),\n        legend.position = 'none',\n        plot.title = element_text(face = \"bold\",size=13,hjust=0.5))\n\nWarning: Removed 3850 rows containing missing values or values outside the scale range\n(`stat_slabinterval()`).\n\n\nWarning: Removed 3850 rows containing non-finite outside the scale range\n(`stat_boxplot()`).\n\n\n\n\n\n\n\n\n\n\nquartile_station_table &lt;- station %&gt;%\n  group_by(station) %&gt;%\n  summarize(\n    Min    = round(min(mean_temperature_c, na.rm = TRUE),2),\n    Q1     = round(quantile(mean_temperature_c, probs = 0.25, na.rm = TRUE),2),\n    Median = round(median(mean_temperature_c, na.rm = TRUE),2),\n    Mean   = round(mean(mean_temperature_c, na.rm = TRUE),2),\n    Q3     = round(quantile(mean_temperature_c, probs = 0.75, na.rm = TRUE),2),\n    Q4     = round(quantile(mean_temperature_c, probs = 1, na.rm = TRUE),2),\n    Max    = round(max(mean_temperature_c, na.rm = TRUE),2)\n  )\n\nkable(quartile_station_table)\n\n\n\n\nstation\nMin\nQ1\nMedian\nMean\nQ3\nQ4\nMax\n\n\n\n\nChangi\n23.0\n27.4\n28.2\n28.09\n28.9\n30.7\n30.7\n\n\nMarina Barrage\n23.2\n27.9\n28.8\n28.66\n29.5\n31.3\n31.3\n\n\n\n\n\n\nlibrary(plotly)\n\n\nAttaching package: 'plotly'\n\n\nThe following object is masked from 'package:ggplot2':\n\n    last_plot\n\n\nThe following object is masked from 'package:stats':\n\n    filter\n\n\nThe following object is masked from 'package:graphics':\n\n    layout\n\nlibrary(ggplot2)\nlibrary(dplyr)\n\n# Change to \"all\" to display all stations\nselected_station &lt;- c(\"Changi\", \"Marina Barrage\")  \n\n# Filter the data accordingly\nstation_data &lt;- if (\"all\" %in% selected_station) {\n  station\n} else {\n  station %&gt;% filter(station %in% selected_station)\n}\n\n# Create the plot using the filtered data\np &lt;- ggplot(data = station_data, \n            aes(x = mean_temperature_c,\n                y = daily_rainfall_total_mm, \n                color = station)) +\n  geom_point(size = 1, alpha = 0.7) +  \n  coord_cartesian(ylim = c(0, 150))+\n  theme_minimal() +\n  labs(x = \"Mean Temperature (°C)\", y = \"Daily Total Rainfall (mm)\") +\n  theme(\n    plot.background = element_rect(fill = \"white\", color = NA),\n    panel.background = element_rect(fill = \"white\"),\n    axis.title = element_text(size = 10, hjust = 0.5),\n    axis.text = element_text(size = 8),\n    legend.position = \"top\",\n    plot.title = element_text(size = 14, face = \"bold\", hjust = 0.5)\n  )\n\n\nggplotly(p)"
  }
]